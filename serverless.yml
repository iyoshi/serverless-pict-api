# Welcome to Serverless!
#
# optional parameters
#   - region
#   - stage
#   - accountId
#

service: serverless-pict-api
frameworkVersion: "^1.26.1"

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 256
  timeout: 25
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
        - "s3:*"
        - "rekognition:*"
      Resource: "*"
  environment:
      PHOTOS_TABLE_NAME: Photos
      PHOTOS_BUCKET: serverless-pict-storage

functions:
  post-images:
    handler: src/post_images.handler
    events:
      - http:
          path: images
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz

  update-images:
    handler: src/update_images.handler
    events:
      - http:
          path: images
          method: put
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz

  get-images:
    handler: src/get_images.handler
    events:
      - http:
          path: images
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz

  get-image:
    handler: src/get_image.handler
    events:
      - http:
          path: images/{image_id}
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz

  delete-image:
    handler: src/delete_image.handler
    events:
      - http:
          path: images/{image_id}
          method: delete
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz

  recognize-image:
    handler: src/recognize_image.handler

resources:
  Resources:

    PhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Images
        AttributeDefinitions:
          - AttributeName: ImageID
            AttributeType: S
          - AttributeName: UserID
            AttributeType: S
        KeySchema:
          - AttributeName: ImageID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: UserID-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    PhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverless-pict-storage
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
              AllowedOrigins:
                - "*"
              MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Function:
                Fn::GetAtt:
                - RecognizeDashimageLambdaFunction
                - Arn
              Event: "s3:ObjectCreated:*"


    RecognizeImageLambdaPermissionS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - RecognizeDashimageLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn:
          Fn::GetAtt:
            - PhotosBucket
            - Arn
